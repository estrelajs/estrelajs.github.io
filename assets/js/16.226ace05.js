(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{435:function(t,a,s){"use strict";s.r(a);var e=s(65),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"signals-reactivity-made-easy"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#signals-reactivity-made-easy"}},[t._v("#")]),t._v(" Signals: Reactivity Made Easy")]),t._v(" "),s("p",[t._v("Let's talk about signals in Estrela! They're like these cool containers that hold values that can change over time. ðŸ“¦ðŸ’¨")]),t._v(" "),s("p",[t._v("They represent data that reacts to changes, and when a signal's value changes, it emits a fresh new value. Think of them like broadcasting stations for your data updates!")]),t._v(" "),s("h2",{attrs:{id:"creating-a-signal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-signal"}},[t._v("#")]),t._v(" Creating a Signal")]),t._v(" "),s("p",[t._v("To get started, you simply need to call the "),s("code",[t._v("signal")]),t._v(" function. Easy peasy! ðŸ˜Ž Just give it an initial value, and it returns the signal for you.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" signal "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'estrela'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myCounter "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In this example, we've created a "),s("code",[t._v("myCounter")]),t._v(" signal with an initial value of 0.")]),t._v(" "),s("p",[t._v("Additionally, you can pass an optional equal function as the second parameter, which is used to compare the results to detect distinct value emits. By default, it uses the strict equality (a === b) for comparison.")]),t._v(" "),s("h2",{attrs:{id:"checking-the-current-value"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#checking-the-current-value"}},[t._v("#")]),t._v(" Checking the Current Value")]),t._v(" "),s("p",[t._v("Okay, now you've got your signal all set up. To see what's inside, you just call the signal like a function. Ta-da! ðŸŽ‰")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("myCounter")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 0")]),t._v("\n")])])]),s("p",[t._v("This "),s("code",[t._v("console.log")]),t._v(" will display the current value of "),s("code",[t._v("myCounter")]),t._v(". Simple, right?")]),t._v(" "),s("h2",{attrs:{id:"updating-the-signal"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#updating-the-signal"}},[t._v("#")]),t._v(" Updating the Signal")]),t._v(" "),s("p",[t._v("The real magic happens when you update the signal's value. ðŸª„ You do this with the "),s("code",[t._v("set")]),t._v(", "),s("code",[t._v("update")]),t._v(", or "),s("code",[t._v("mutate")]),t._v(" methods.")]),t._v(" "),s("h3",{attrs:{id:"set-the-direct-setter"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#set-the-direct-setter"}},[t._v("#")]),t._v(" "),s("code",[t._v("set")]),t._v(": The Direct Setter")]),t._v(" "),s("p",[t._v("Use "),s("code",[t._v("set")]),t._v(" when you want to set a new value for your signal. Once you call "),s("code",[t._v("set(newValue)")]),t._v(", the signal's value updates and notifies any observers automatically.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("myCounter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("set")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("42")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Boom! Now your "),s("code",[t._v("myCounter")]),t._v(" has a value of 42. The whole app knows about it!")]),t._v(" "),s("h3",{attrs:{id:"update-the-fancy-modifier"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#update-the-fancy-modifier"}},[t._v("#")]),t._v(" "),s("code",[t._v("update")]),t._v(": The Fancy Modifier")]),t._v(" "),s("p",[t._v("Sometimes, you want to update the value based on the current one. ðŸ”„ "),s("code",[t._v("update")]),t._v(" is perfect for this! Just pass in an "),s("code",[t._v("updaterFunction")]),t._v(" that modifies the current value and returns the updated version.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("myCounter"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("update")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Let's increment the value by 1")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" currentValue "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("With this code, you increased the value of "),s("code",[t._v("myCounter")]),t._v(" by 1. Isn't it smooth?")]),t._v(" "),s("h3",{attrs:{id:"mutate-the-straight-mutator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mutate-the-straight-mutator"}},[t._v("#")]),t._v(" "),s("code",[t._v("mutate")]),t._v(": The Straight Mutator")]),t._v(" "),s("p",[t._v("When your signal contains mutable objects or arrays, "),s("code",[t._v("mutate")]),t._v(" comes to the rescue! ðŸ’ª You get the current value inside the "),s("code",[t._v("mutatorFunction")]),t._v(", make changes directly, and the signal handles it all neatly.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[t._v("myMutableObjectSignal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("mutate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("currentValue")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Update properties directly")]),t._v("\n  currentValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("someProperty "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'new value'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("Now, "),s("code",[t._v("myMutableObjectSignal")]),t._v(" has updated properties like magic!")]),t._v(" "),s("p",[t._v("So, that's the power of signals! With Estrela's reactive signals, you can easily manage your application's state and keep things updated and in sync without breaking a sweat. ðŸ¤“")]),t._v(" "),s("h2",{attrs:{id:"computed-signals"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#computed-signals"}},[t._v("#")]),t._v(" Computed Signals")]),t._v(" "),s("p",[t._v('In addition to regular signals, Estrela also offers "computed" signals, a powerful tool for generating derived signals that automatically notify when the computed value changes. ðŸ”„')]),t._v(" "),s("p",[t._v("To create a "),s("code",[t._v("computed")]),t._v(" signal, you call the computed function, providing it with a function that computes the new value based on other signals. The function returns a "),s("code",[t._v("ReadonlySignal")]),t._v(", which you can use like any other signal.")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" signal"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" computed "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'estrela'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signalA "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" signalB "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myComputedSignal "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("computed")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Compute the new value based on signalA and signalB")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalA")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("signalB")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("p",[t._v("In this example, "),s("code",[t._v("myComputedSignal")]),t._v(" is a new "),s("code",[t._v("ReadonlySignal")]),t._v(" that depends on "),s("code",[t._v("signalA")]),t._v(" and "),s("code",[t._v("signalB")]),t._v(". Whenever "),s("code",[t._v("signalA")]),t._v(" or "),s("code",[t._v("signalB")]),t._v(" changes, "),s("code",[t._v("myComputedSignal")]),t._v(" will be automatically updated.")]),t._v(" "),s("p",[t._v("Computed signals are versatile, just like normal signals. You can provide an equality function as the second argument to the "),s("code",[t._v("computed")]),t._v(" function to customize the comparison logic for their updates.")])])}),[],!1,null,null,null);a.default=n.exports}}]);